{"version":3,"sources":["containers/dnd/DnDContainer.js"],"names":["initial","Array","from","length","v","k","map","id","concat","content","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","Object","_Users_ninpeng_Documents_GitHub_react_sample_page_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","Quote","_ref","quote","index","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","react_beautiful_dnd__WEBPACK_IMPORTED_MODULE_3__","draggableId","provided","assign","ref","innerRef","draggableProps","dragHandleProps","QuoteList","React","memo","_ref2","quotes","key","DnDContainer","_useState","useState","_useState2","state","setState","react_bootstrap__WEBPACK_IMPORTED_MODULE_2__","onDragEnd","destination","source","droppableId","droppableProps","placeholder"],"mappings":"mJAIMA,EAAUC,MAAMC,KAAK,CAAEC,OAAQ,IAAM,SAACC,EAAGC,GAAJ,OAAUA,IAAGC,IAAI,SAAAD,GAM1D,MALsB,CACpBE,GAAE,MAAAC,OAAQH,GACVI,QAAO,SAAAD,OAAWH,MAMhBK,EAAU,SAACC,EAAMC,EAAYC,GACjC,IAAMC,EAASb,MAAMC,KAAKS,GADoBI,EAE5BD,EAAOE,OAAOJ,EAAY,GAArCK,EAFuCC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAK9C,OAFAD,EAAOE,OAAOH,EAAU,EAAGI,GAEpBH,GAGHM,EAAQ,SAAAC,GAAsB,IAAnBC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,MACtB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,YAAaN,EAAMf,GAAIgB,MAAOA,GACtC,SAAAM,GAAQ,OACPL,EAAAC,EAAAC,cAAA,MAAAR,OAAAY,OAAA,CACEC,IAAKF,EAASG,UACVH,EAASI,eACTJ,EAASK,iBASZZ,EAAMb,YAOX0B,EAAYC,IAAMC,KAAK,SAAAC,GAC3B,OAD0DA,EAAVC,OAClCjC,IAAI,SAACgB,EAAOC,GAAR,OAChBC,EAAAC,EAAAC,cAACN,EAAD,CAAOE,MAAOA,EAAOC,MAAOA,EAAOiB,IAAKlB,EAAMf,SA0CnCkC,UAtCM,WAAM,IAAAC,EAECC,mBAAS,CAAEJ,OAAQvC,IAFpB4C,EAAA1B,OAAAC,EAAA,EAAAD,CAAAwB,EAAA,GAElBG,EAFkBD,EAAA,GAEXE,EAFWF,EAAA,GAsBzB,OACEpB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAiBqB,UApBrB,SAAmBlC,GACjB,GAAKA,EAAOmC,aAIRnC,EAAOmC,YAAY1B,QAAUT,EAAOoC,OAAO3B,MAA/C,CAIA,IAAMgB,EAAS7B,EACbmC,EAAMN,OACNzB,EAAOoC,OAAO3B,MACdT,EAAOmC,YAAY1B,OAGrBuB,EAAS,CAAEP,cAMPf,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWwB,YAAY,QACpB,SAAAtB,GAAQ,OACPL,EAAAC,EAAAC,cAAA,MAAAR,OAAAY,OAAA,CAAKC,IAAKF,EAASG,UAAcH,EAASuB,gBACxC5B,EAAAC,EAAAC,cAACS,EAAD,CAAWI,OAAQM,EAAMN,SACxBV,EAASwB","file":"static/js/5.0fe61477.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { Container } from 'react-bootstrap';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nconst initial = Array.from({ length: 10 }, (v, k) => k).map(k => {\n  const custom: Quote = {\n    id: `id-${k}`,\n    content: `Quote ${k}`\n  };\n\n  return custom;\n});\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst Quote = ({ quote, index }) => {\n  return (\n    <Draggable draggableId={quote.id} index={index}>\n      {provided => (\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          // style={{\n          //   width: '200px',\n          //   border: '1px solid grey',\n          //   marginBottom: '8px',\n          //   backgroundColor: 'lightblue',\n          //   padding: '8px'\n          // }}\n        >\n          {quote.content}\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\nconst QuoteList = React.memo(function QuoteList({ quotes }) {\n  return quotes.map((quote, index: number) => (\n    <Quote quote={quote} index={index} key={quote.id} />\n  ));\n});\n\nconst DnDContainer = () => {\n\n  const [state, setState] = useState({ quotes: initial });\n\n  function onDragEnd(result) {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n\n    const quotes = reorder(\n      state.quotes,\n      result.source.index,\n      result.destination.index\n    );\n\n    setState({ quotes });\n  }\n\n  return (\n    <Container>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"list\">\n          {provided => (\n            <div ref={provided.innerRef} {...provided.droppableProps}>\n              <QuoteList quotes={state.quotes} />\n              {provided.placeholder}\n            </div>)\n          }\n        </Droppable>\n      </DragDropContext>\n    </Container>\n  )\n}\n\nexport default DnDContainer;\n"],"sourceRoot":""}