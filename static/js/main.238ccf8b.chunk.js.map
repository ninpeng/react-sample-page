{"version":3,"sources":["containers/DefaultBreadcrumb.js","containers/DefaultLayout.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","react_default","a","createElement","Breadcrumb","tag","listTag","BreadcrumbItem","react_router_dom","to","Home","loadable","__webpack_require__","e","then","bind","Phaser","Promise","all","DefaultLayout","className","containers_DefaultBreadcrumb","Container","fluid","react_router","exact","path","name","component","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAgBeA,cAZW,SAACC,GACzB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,IAAI,MAAMC,QAAQ,OAC5BL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KAAgBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,KAAT,SAChBR,EAAAC,EAAAC,cAACI,EAAA,EAAD,KAAgBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,WAAT,WAChBR,EAAAC,EAAAC,cAACI,EAAA,EAAD,sBCCFG,EAAOC,YAAS,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,cACtBC,EAASL,YAAS,kBAAMM,QAAAC,IAAA,CAAAN,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAmCfI,mLA/BX,OACElB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OAIbnB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,YAQbnB,EAAAC,EAAAC,cAAA,QAAMiB,UAAU,QACdnB,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAWC,OAAK,GACdtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,KAAK,OAAOC,UAAWlB,IAC7CT,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,KAAK,SAASC,UAAWZ,gBApBzCa,aCEbC,MAVf,WACE,OACE7B,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOE,KAAK,IAAIC,KAAK,OAAOC,UAAWT,OCE3BY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.238ccf8b.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter, Link } from \"react-router-dom\";\nimport { Breadcrumb, BreadcrumbItem } from 'react-bootstrap';\n\nconst DefaultBreadcrumb = (props) => {\n  return (\n    <div>\n      <Breadcrumb tag=\"nav\" listTag=\"div\">\n        <BreadcrumbItem><Link to=\"/\">Home</Link></BreadcrumbItem>\n        <BreadcrumbItem><Link to=\"/phaser\">Phaser</Link></BreadcrumbItem>\n        <BreadcrumbItem>Bootstrap</BreadcrumbItem>\n      </Breadcrumb>\n    </div>\n  );\n};\n\nexport default withRouter(DefaultBreadcrumb);\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\nimport loadable from '@loadable/component';\n\n// import DefaultAside from './DefaultAside';\n// import DefaultFooter from './DefaultFooter';\n// import DefaultHeader from './DefaultHeader';\nimport DefaultBreadcrumb from './DefaultBreadcrumb';\n\nconst Home = loadable(() => import('./home/HomeContainer'));\nconst Phaser = loadable(() => import('./phaser/PhaserContainer'));\n\nclass DefaultLayout extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        {/*<AppHeader fixed>\n          <DefaultHeader />\n        </AppHeader>*/}\n        <div className=\"app-body\">\n          {/*<AppSidebar fixed display=\"lg\">\n            <AppSidebarHeader />\n            <AppSidebarForm />\n            <AppSidebarNav navConfig={navigation} {...this.props} />\n            <AppSidebarFooter />\n            <AppSidebarMinimizer />\n          </AppSidebar>*/}\n          <main className=\"main\">\n            <DefaultBreadcrumb/>\n            <Container fluid>\n              <Switch>\n                <Route exact path=\"/\" name=\"home\" component={Home} />\n                <Route exact path=\"/phaser\" name=\"phaser\" component={Phaser} />\n              </Switch>\n            </Container>\n          </main>\n        </div>\n        {/*<AppFooter>\n          <DefaultFooter />\n        </AppFooter>*/}\n      </div>\n    );\n  }\n}\n\nexport default DefaultLayout;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n// import './App.css';\n\nimport DefaultLayout from './containers/DefaultLayout';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path=\"/\" name=\"Home\" component={DefaultLayout} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}