{"version":3,"sources":["models.js","containers/Navbars.js","containers/DefaultLayout.js","App.js","serviceWorker.js","index.js"],"names":["count","state","reducers","increment","payload","effects","dispatch","incrementAsync","_incrementAsync","Object","asyncToGenerator","regenerator_default","a","mark","_callee","rootState","wrap","_context","prev","next","Promise","resolve","setTimeout","stop","_x","_x2","apply","this","arguments","Navbars","react_default","createElement","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","Home","loadable","__webpack_require__","e","then","bind","Sample","Phaser","all","NoMatch","DefaultLayout","containers_Navbars","react_router","exact","path","component","Component","App","react_router_dom","name","Boolean","window","location","hostname","match","store","init","models","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47c85ec0.chunk.js","sourcesContent":["export const count = {\n  state: 0, // initial state\n  reducers: {\n    // handle state changes with pure functions\n    increment(state, payload) {\n      return state + payload\n    }\n  },\n  effects: (dispatch) => ({\n    // handle state changes with impure functions.\n    // use async/await for async actions\n    async incrementAsync(payload, rootState) {\n      await new Promise(resolve => setTimeout(resolve, 500))\n      dispatch.count.increment(payload);\n    }\n  })\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap';\n\nconst Navbars = () => {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand as={Link} to=\"/\">React-Bootstrap</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link as={Link} to=\"/home\">Home</Nav.Link>\n          <Nav.Link as={Link} to=\"/sample\">Sample</Nav.Link>\n          <Nav.Link as={Link} to=\"/phaser\">Phaser</Nav.Link>\n          <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item as={Link} to=\"/action/3.1\">Action</NavDropdown.Item>\n            <NavDropdown.Item as={Link} to=\"/action/3.2\">Another action</NavDropdown.Item>\n            <NavDropdown.Item as={Link} to=\"/action/3.3\">Something</NavDropdown.Item>\n            <NavDropdown.Divider />\n            <NavDropdown.Item as={Link} to=\"/action/3.4\">Separated link</NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n        <Form inline>\n          <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n          <Button variant=\"outline-success\">Search</Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\nexport default Navbars;\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport loadable from '@loadable/component';\n\nimport Navbars from './Navbars';\n\nconst Home = loadable(() => import('./home/HomeContainer'));\nconst Sample = loadable(() => import('./sample/SampleContainer'));\nconst Phaser = loadable(() => import('./phaser/PhaserContainer'));\nconst NoMatch = loadable(() => import('./nomatch/NomatchContainer'));\n\nclass DefaultLayout extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-body\">\n          <main className=\"main\">\n            <Navbars/>\n            <Switch>\n              <Route exact path={[\"/\", \"/home\"]} component={Home} />\n              <Route path=\"/sample\" component={Sample} />\n              <Route exact path=\"/phaser\" component={Phaser} />\n              <Route component={NoMatch} />\n            </Switch>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DefaultLayout;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n// import './App.css';\n\nimport DefaultLayout from './containers/DefaultLayout';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" name=\"Home\" component={DefaultLayout} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { init } from '@rematch/core';\nimport { Provider } from 'react-redux';\nimport * as models from './models';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// generate Redux store\nconst store = init({\n    models,\n});\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}